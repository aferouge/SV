% All possible states for the bridge components
sort
  st_sign    = struct on | off;             %sign status
  st_deck    = struct up | down;            %deck status
  st_barrier = struct lift | lower;         %barrier status
  st_lock    = struct engaged | disengaged; %lock status
  st_bridge  = struct open | close;

  sign_id = struct P1 | P2 | P3 | P4;

% Flip actions to make a bridge component alter his status
% SIGNS
map
  flip_sign: st_sign -> st_sign;
eqn
  flip_sign(on) = off;
  flip_sign(off) = on;

% DECK
map
  flip_deck: st_deck -> st_deck;
eqn
  flip_deck(up) = down;
  flip_deck(down) = up;

% FRONT BARRIERS
map
  flip_barfront: st_barrier -> st_barrier;
eqn
  flip_barfront(lift) = lower;
  flip_barfront(lower) = lift;

% BACK BARRIERS
map
  flip_barback: st_barrier -> st_barrier;
eqn
  flip_barback(lift) = lower;
  flip_barback(lower) = lift;

% LOCKS
map
  flip_lock: st_lock -> st_lock;
%  flip_lockL2: st_lock -> st_lock;

var
  st: st_lock;

eqn
  flip_lock(engaged) = disengaged;
  flip_lock(disengaged) = engaged;
%  flip_lockL2(engaged) = engaged;
%  flip_lockL2(disengaged) = disengaged;


% Actions for communication between the bridge components
act

  sendPre, receivePre, commPre: st_sign;
  rSwitchOffPre, sSwitchOffPre, cSwitchOffPre;
  rSwitchOnPre, sSwitchOnPre, cSwitchOnPre;
  setPreSign: st_sign;

  sendStop, receiveStop, commStop: st_sign;
  rSwitchOffStop, sSwitchOffStop, cSwitchOffStop;
  rSwitchOnStop, sSwitchOnStop, cSwitchOnStop;
  setStopSign: st_sign;


  
  sendDeck, recieveDeck, commDeck: st_deck;
  sLiftDeck, rLiftDeck, cLiftDeck;
  sLowerDeck, rLowerDeck, cLowerDeck;
  setDeck: st_deck;

proc

  PreSign(status: st_sign)
    = (status == on) -> rSwitchOffPre . PreSign(status = off)
    + (status == off) -> rSwitchOnPre . PreSign(status = on)
    + sendPre(status) . PreSign();

  StopSign(status: st_sign)
    = (status == on) -> rSwitchOffStop . StopSign(status = off)
    + (status == off) -> rSwitchOnStop . StopSign(status = on)
    + sendStop(status) . StopSign();






  Deck(status: st_deck)
    = (status == up) -> rLowerDeck . Deck(status = down)
    + (status == down) -> rLiftDeck . Deck(status = up)
    + sendDeck(status) . StopSign();
  

proc
  SafetyLayer
    = setPreSign(on) . sSwitchOnPre . SafetyLayer()
    + setPreSign(off) . receiveStop(off) . sSwitchOffPre . SafetyLayer()
    + setStopSign(on) . receivePre(on) . sSwitchOnStop . SafetyLayer()
    + setStopSign(off) . sSwitchOffStop . SafetyLayer();
    + setDeck(up). receiveLock(disengaged) . sLiftDeck . SafetyLayer()
    + setDeck(down). receiveLock(disengaged) . slowerDeck . SafetyLayer()

init
  allow(
    {
      commPre,
      commStop,
      cSwitchOffPre,
      cSwitchOffStop,
      setPreSign,
      setPreSign,
      setStopSign,
      setStopSign,
      setDeck,
    },
    comm({
        receivePre|sendPre -> commPre,
        receiveStop|sendStop -> commStop,
        rSwitchOffPre|sSwitchOffPre -> cSwitchOffPre,
        rSwitchOnPre|sSwitchOnPre -> cSwitchOnPre,
        rSwitchOffStop|sSwitchOffStop -> cSwitchOffStop,
        rSwitchOnStop|sSwitchOnStop -> cSwitchOnStop,
        
        rLowerDeck|sLowerDeck -> cLowerDeck,
        rLiftDeck|sLiftDeck -> cLiftDeck,
        receiveDeck|sendDeck -> commDeck,
      },
         PreSign(off)
      || StopSign(off)

      || Deck(down)
      || SafetyLayer
    )
  );
