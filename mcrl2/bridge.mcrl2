% All possible states for the bridge components
sort
  st_sign    = struct on | off;             %sign status
  st_deck    = struct up | down;            %deck status
  st_barrier = struct lift | lower;         %barrier status
  st_lock    = struct engaged | disengaged; %lock status
  st_bridge  = struct open | close;

  id_lock    = struct L1 | L2;
  id_barrier    = struct B1 | B2;

act
  sendPre, receivePre, commPre: st_sign;
  rSwitchPre, sSwitchPre, cSwitchPre: st_sign;
  setPreSign: st_sign;

proc
  PreSign(status: st_sign)
    = (status == on) -> rSwitchPre(off) . PreSign(status = off)
    + (status == off) -> rSwitchPre(on) . PreSign(status = on)
    + sendPre(status) . PreSign();

act
  sendStop, receiveStop, commStop: st_sign;
  rSwitchStop, sSwitchStop, cSwitchStop: st_sign;
  setStopSign: st_sign;

proc
  StopSign(status: st_sign)
    = (status == on) -> rSwitchStop(off) . StopSign(status = off)
    + (status == off) -> rSwitchStop(on) . StopSign(status = on)
    + sendStop(status) . StopSign();

act
  sendFrontBarrier, receiveFrontBarrier, commFrontBarrier: id_barrier # st_barrier;
  rFrontBarrier, sFrontBarrier, cFrontBarrier: id_barrier # st_barrier;
  setFrontBarrier: st_barrier;

proc
  FrontBarrier(id: id_barrier, status: st_barrier)
    = (status == lower) -> rFrontBarrier(id, lift) . FrontBarrier(status = lift)
    + (status == lift) -> rFrontBarrier(id, lower) . FrontBarrier(status = lower)
    + sendFrontBarrier(id, status) . FrontBarrier();

act
  sendBackBarrier, receiveBackBarrier, commBackBarrier: id_barrier # st_barrier;
  rBackBarrier, sBackBarrier, cBackBarrier: id_barrier # st_barrier;
  setBackBarrier: st_barrier;

proc
  BackBarrier(id: id_barrier, status: st_barrier)
    = (status == lower) -> rBackBarrier(id, lift) . BackBarrier(status = lift)
    + (status == lift) -> rBackBarrier(id, lower) . BackBarrier(status = lower)
    + sendBackBarrier(id, status) . BackBarrier();

act
  setLock: st_lock;
  sendLock, receiveLock, commLock: id_lock # st_lock;
  rLock, sLock, cLock: id_lock # st_lock;

proc
  Lock(id: id_lock, status: st_lock)
    = (status == engaged) -> rLock(id, disengaged) . Lock(status = disengaged)
    + (status == disengaged) -> rLock(id, engaged) . Lock(status = engaged)
    + sendLock(id, status) . Lock();

act
  sendDeck, receiveDeck, commDeck: st_deck;
  sDeck, rDeck, cDeck: st_deck;
  setDeck: st_deck;

proc
  Deck(status: st_deck)
    = (status == up) -> rDeck(down) . Deck(status = down)
    + (status == down) -> rDeck(up) . Deck(status = up)
    + sendDeck(status) . Deck();

proc
  SafetyLayer
    = setPreSign(on) . (receivePre(on) + receivePre(off) . sSwitchPre(on)) . SafetyLayer()
    + setPreSign(off) . (receivePre(off) + receivePre(on) . (receiveStop(off) . sSwitchPre(off) + receiveStop(on))) . SafetyLayer()

    + setStopSign(on) . (receiveStop(on) + receiveStop(off) . (receivePre(on) . sSwitchStop(on) + receivePre(off))) . SafetyLayer()
    + setStopSign(off) . (receiveStop(off) + receiveStop(on) . (receiveFrontBarrier(B1, lift) . sSwitchStop(off) + receiveFrontBarrier(B2, lower))) . SafetyLayer()

    % Lower front barrier
    + setFrontBarrier(lower)
      . (
         receiveStop(off)
         + receiveStop(on)
           . (
             receiveFrontBarrier(B1, lower)
             + receiveFrontBarrier(B1, lift) . sFrontBarrier(B1, lower) 
             ) . (
               receiveFrontBarrier(B2, lower)
               + receiveFrontBarrier(B2, lift) . sFrontBarrier(B2, lower)
               
             )
         )
    . SafetyLayer()

    % Lift front barrier
    + setFrontBarrier(lift)
      . (
         receiveBackBarrier(B1, lower)
         + receiveBackBarrier(B1, lift)
           . (
             receiveBackBarrier(B2, lower)
             + receiveBackBarrier(B2, lift) 
               . (
                 receiveFrontBarrier(B1, lift)
                 + receiveFrontBarrier(B1, lower) . sFrontBarrier(B1, lift) 
                 ) . (
                   receiveFrontBarrier(B2, lift)
                   + receiveFrontBarrier(B2, lower) . sFrontBarrier(B2, lift)
                 )
             )
         )
    . SafetyLayer()

    % Lower back barriers
    + setBackBarrier(lower)
      . (
         receiveFrontBarrier(B1, lift)
         + receiveFrontBarrier(B1, lower)
           . (
             receiveFrontBarrier(B2, lift)
             + receiveFrontBarrier(B2, lower) 
               . (
                 receiveBackBarrier(B1, lower)
                 + receiveBackBarrier(B1, lift) . sBackBarrier(B1, lower) 
                 ) . (
                   receiveBackBarrier(B2, lower)
                   + receiveBackBarrier(B2, lift) . sBackBarrier(B2, lower)
                 )
             )
         )
    . SafetyLayer()

    % Lift back barriers
    + setBackBarrier(lift)
      . (
         receiveLock(L1, disengaged)
         + receiveLock(L1, engaged)
           . (
             receiveLock(L2, disengaged)
             + receiveLock(L2, engaged) 
               . (
                 receiveBackBarrier(B1, lift)
                 + receiveBackBarrier(B1, lower) . sBackBarrier(B1, lift) 
                 ) . (
                   receiveBackBarrier(B2, lift)
                   + receiveBackBarrier(B2, lower) . sBackBarrier(B2, lift)
                 )
             )
         )
    . SafetyLayer()

    % Engage locks
    + setLock(engaged)
      . (
        receiveDeck(up)
        + receiveDeck(down)
          . (
            receiveLock(L1, engaged)
            + receiveLock(L1, disengaged) . sLock(L1, engaged)
            )
          . (
            receiveLock(L2, engaged)
            + receiveLock(L2, disengaged) . sLock(L2, engaged)
            )
        ) 
     . SafetyLayer()

    % Disengage locks
    + setLock(disengaged)
      . (
        receiveBackBarrier(B1, lift)
        + receiveBackBarrier(B1, lower)
          . (
            receiveLock(L1, disengaged)
            + receiveLock(L1, engaged) . sLock(L1, disengaged)
          ) . (
            receiveLock(L2, disengaged)
            + receiveLock(L2, engaged) . sLock(L2, disengaged)
          )
      ) . SafetyLayer()

    % Lift deck
    + setDeck(up)
      . (
        receiveDeck(up)
        + receiveDeck(down)
          . (
            receiveLock(L1, engaged)
            + receiveLock(L1, disengaged)
              . (
                receiveLock(L2, engaged)
                + receiveLock(L2, disengaged) . sDeck(up)
              )
          )
      ) . SafetyLayer()

    % Lower deck
    + setDeck(down)
      . (
        receiveDeck(down)
        + receiveDeck(up)
          . (
            receiveLock(L1, engaged)
            + receiveLock(L1, disengaged)
              . (
                receiveLock(L2, engaged)
                + receiveLock(L2, disengaged) . sDeck(down)
              )
          )
      ) . SafetyLayer();


init
  allow({
    setPreSign,
    commPre,
    cSwitchPre,

    setStopSign,
    commStop,
    cSwitchStop,

    setFrontBarrier,
    commFrontBarrier,
    cFrontBarrier,

    setBackBarrier,
    commBackBarrier,
    cBackBarrier,

    setLock,
    commLock,
    cLock,

    setDeck,
    commDeck,
    cDeck
  },
  comm({
    receivePre|sendPre -> commPre,
    rSwitchPre|sSwitchPre -> cSwitchPre,

    receiveStop|sendStop -> commStop,
    rSwitchStop|sSwitchStop -> cSwitchStop,

    receiveFrontBarrier|sendFrontBarrier -> commFrontBarrier,
    rFrontBarrier|sFrontBarrier -> cFrontBarrier,

    receiveBackBarrier|sendBackBarrier -> commBackBarrier,
    rBackBarrier|sBackBarrier -> cBackBarrier,

    receiveLock|sendLock -> commLock,
    rLock|sLock -> cLock,

    receiveDeck|sendDeck -> commDeck,
    rDeck|sDeck -> cDeck
  },
       PreSign(off)
    || StopSign(off)
    || FrontBarrier(B1, lift)
    || FrontBarrier(B2, lift)
    || BackBarrier(B1, lift)
    || BackBarrier(B2, lift)
    || Lock(L1, engaged)
    || Lock(L2, engaged)
    || Deck(down)
    || SafetyLayer
  ));
