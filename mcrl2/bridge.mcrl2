
sort
  st_sign = struct on | off;
  st_deck = struct up | down;

map
  flip_sign: st_sign -> st_sign;

var
  st: st_sign;

eqn
  flip_sign(on) = off;
  flip_sign(off) = on;

map
  flip_deck: st_deck -> st_deck;

var
  st: st_deck;

eqn
  flip_deck(up) = down;
  flip_deck(down) = up;

act
  sendPre: st_sign;
  receivePre: st_sign;
  commPreSign: st_sign;

  sendStop: st_sign;
  receiveStop: st_sign;
  commStopSign: st_sign;

  sendDeck: st_deck;
  receiveDeck: st_deck;
  commDeck: st_deck;

proc
  PreSign(status: st_sign)
    = receivePre(flip_sign(status)) . PreSign(flip_sign(status))
    + sendStop(status) . PreSign(status);

  StopSign(status: st_sign)
    = receiveStop(flip_sign(status)) . StopSign(flip_sign(status))
    + (status == on)  -> sendDeck(up) . StopSign(status)
    + (status == off) -> sendPre(off) . StopSign(status);

  Deck(status: st_deck)
    = receiveDeck(flip_deck(status)) . Deck(flip_deck(status))
    + (status == down) -> sendStop(off) . Deck(status);

proc
  User
    = sendPre(on) . User
    + sendDeck(down) . User;

init
  allow(
    {
      commPreSign,
      commStopSign,
      commDeck
    },
    comm({
        receivePre|sendPre -> commPreSign,
        receiveStop|sendStop -> commStopSign,
        receiveDeck|sendDeck -> commDeck
      },
      PreSign(off)
      || StopSign(off)
      || Deck(down)
      || User
    )
  );
